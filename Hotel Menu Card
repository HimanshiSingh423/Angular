#app.component.html
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/li0bs/jquery/3.6.0/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>
<body>
  <h1 style="text-align: center;color:teal"><u>Menu</u></h1>
  <table class="table table-striped">
    <thead>
      <tr>
        <th>S.No</th>
        <th>Dishes</th>
       
        <th>MRP</th>
        <th>Type</th>
        <th>Plate</th>
        <th>Total</th>
      </tr>
    </thead>
    <tbody>
     <tr *ngFor="let item of records; let i = index;">
      <td>{{item.id}}</td>
      <td>{{item.dish}}</td>
      <td>{{item.cmrp}}</td>
      <td>{{item.type}}
        <select (change)="getMRP($event,i)">
          <option value="0">Select</option>
          <option value="q">Quarter</option>
          <option value="h">Half</option>
          <option value="f">Full</option>
        </select>
      </td>
     
      <td>{{item.plate}}
        <button type="submit" (click)="getData(item,i)" class="btn btn-default">+</button>
      <button type="submit"  class="btn btn-primary">{{item.counter}}</button>
      <button type="submit" (click)="getDataSub(item,i)" class="btn btn-default"[disabled]="item.counter==0">-</button>
      </td>
      <td>{{item.tmrp}}</td>
       <td>{{item.count}}</td>
      
     </tr>
    </tbody> 
  </table>
  <h3>Total Bill:-{{bill}}</h3>
 
</body>
</html>

#app.component.ts
import { Component, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit{
  title = 'HotelMenu';
  HotelMenu!:FormGroup;
  id:number=0;
  dish:any;
  name:any;
  mrp:number=0;
  Total_price:number=0;
  bill:number=0;
  tax:number=0;
  plate:any=[];
  type:any;
  records:any=[
    {id:1,dish:"Tomato Soup",qmrp:99,hmrp:180,fmrp:345,cmrp:0,tmrp:0,type:'',counter:0},
    {id:2,dish:"Chilly Paneer",qmrp:79,hmrp:180,fmrp:345,cmrp:0,tmrp:0,type:'',counter:0},
    {id:3,dish:"Chilly Potato",qmrp:149,hmrp:280,fmrp:345,cmrp:0,tmrp:0,type:'',counter:0},
    {id:4,dish:"Chowmein",mrp:199,hmrp:280,fmrp:345,cmrp:0,tmrp:0,type:'',counter:0},
    {id:5,dish:"Spring Roll",qmrp:149,hmrp:180,fmrp:249,cmrp:0,tmrp:0,type:'',counter:0},
    {id:6,dish:"Handi Mutton",qmrp:249,hmrp:369,fmrp:499,cmrp:0,tmrp:0,type:'',counter:0},
    {id:7,dish:"Handi Chicken",qmrp:199,hmrp:299,fmrp:399,cmrp:0,tmrp:0,type:'',counter:0},
    {id:8,dish:"Paneer Manchurian Gravy",qmrp:199,hmrp:180,fmrp:345,cmrp:0,tmrp:0,type:'',counter:0},
    {id:9,dish:"Faluda",qmrp:99,hmrp:199,fmrp:249,cmrp:0,tmrp:0,type:'',counter:0},
    {id:10,dish:"Shahi Paneer",qmrp:199,hmrp:280,fmrp:399,cmrp:0,tmrp:0,type:'',counter:0},
    {id:11,dish:"Butter Paneer",qmrp:199,hmrp:280,fmrp:399,cmrp:0,tmrp:0,type:'',counter:0},
    {id:12,dish:"Mushroom",qmrp:199,hmrp:280,fmrp:399,cmrp:0,tmrp:0,type:'',counter:0},
  ]
  ngOnInit(): void {
 
  }
  getData(item:any,i:number){
    var index=this.records.map(function(x:any){return x.id;}).indexOf(item.id);
    this.records[index].counter++;
    // this.bill=0;
    // for(let x=0;x<this.records.length;x++){
    //   this.bill++;
    //   console.log("Bill",this.records[x].mrp);
    //   this.bill=this.bill+parseInt(this.records[x].mrp);
    // }
    this.records[i].tmrp=(this.records[i].cmrp*this.records[i].counter);
    this.bill=0;
    this.records.forEach((item:any) => {

     
    
      if(item.tmrp!=0)
      {
      this.bill=this.bill+item.tmrp;
      console.log("Item:",item);
      }
      
    });
    console.log("+Bill :",this.bill);
  }
  getDataSub(item:any,i:number){
    var index=this.records.map(function(x:any){return x.id;}).indexOf(item.id);
    {
      this.records[index].counter--;
    }

    this.records[i].tmrp=(this.records[i].cmrp*this.records[i].counter);
    this.bill=0;
    this.records.forEach((item:any) => {


    
      if(item.tmrp!=0)
      this.bill=this.bill+item.tmrp;
      
    });

    console.log("-Bill :",this.bill);



  }

  getMRP(e:any,index:number)
  {
if(e.target.value=="q")
this.records[index].cmrp=this.records[index].qmrp;
else if(e.target.value=="h")
this.records[index].cmrp=this.records[index].hmrp;
else if(e.target.value=="f")
this.records[index].cmrp=this.records[index].fmrp;
else
this.records[index].cmrp=0;

 }
  
}
